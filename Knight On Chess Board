public class Solution {
    public class Coord
    {
        int x;
        int y;
        int r;
        public Coord(int x, int y,int r)
        {
            this.x = x;
            this.y = y;
            this.r = r;
        }
    }
    public int knight(int A, int B, int C, int D, int E, int F) {
        Queue<Coord> q= new LinkedList();
        boolean[][] b = new boolean[A+1][B+1];
        int arr[][] = {{1,2},{2,1},{2,-1},{1,-2},{-1,-2},{-1,2},{-2,1},{-2,-1}};
        q.add(new Coord(C,D,0));
        b[C][D] = true;
        if(C==E && D==F)
        return 0;
        while(!q.isEmpty())
        {
            Coord c = q.peek();
            q.poll();
             for(int i = 0; i < 8; i++)
             {
                int x1 = arr[i][0]+c.x;
                int y1 = arr[i][1]+c.y;
                if(x1 == E && y1 == F)
                {
                    int h = c.r + 1;
                    return h;
                }
                if(x1 >0 && x1 <=A && y1 >0 && y1 <=B && b[x1][y1] == false)
                {
                    q.add(new Coord(x1,y1,c.r+1));
                    b[x1][y1] = true;
                }
             }
        }
        return -1;
        
    }
}
